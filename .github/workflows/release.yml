name: Release GoLang package
# with pontos

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: What kind of release do you want to do (pontos --release-type argument)?
        options:
          - alpha
          - patch
          - minor
          - major
          - release-candidate


jobs:
  build-and-release:
    name: Create a new release with pontos
    # If the event is a workflow_dispatch or on of the labels 'pre release',
    # 'patch release', 'minor release' or 'major release' is set and PR is
    # closed because of a merge
    # NOTE: priority of set labes will be alpha > release-candidate > patch > minor > major,
    #       so if 'major' and 'patch' labes are set, it will create a patch release.
    if: |
      ( github.event_name == 'workflow_dispatch') || (
        ( contains(github.event.pull_request.labels.*.name, 'alpha release') ||
          contains(github.event.pull_request.labels.*.name, 'rc release') ||
          contains(github.event.pull_request.labels.*.name, 'patch release') ||
          contains(github.event.pull_request.labels.*.name, 'minor release') ||
          contains(github.event.pull_request.labels.*.name, 'major release')) &&
          github.event.pull_request.merged == true )
    runs-on: 'ubuntu-latest'
    steps:
      - name: Selecting the Release type
        if: contains(github.event.pull_request.labels.*.name, 'major release')
        run: |
          echo "RELEASE_TYPE=major" >> $GITHUB_ENV
      - if: contains(github.event.pull_request.labels.*.name, 'minor release')
        run: |
          echo "RELEASE_TYPE=minor" >> $GITHUB_ENV
      - if: contains(github.event.pull_request.labels.*.name, 'patch release')
        run: |
          echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
      - if: contains(github.event.pull_request.labels.*.name, 'rc release')
        run: |
          echo "RELEASE_TYPE=release-candidate" >> $GITHUB_ENV
      - if: contains(github.event.pull_request.labels.*.name, 'alpha release')
        run: |
          echo "RELEASE_TYPE=alpha" >> $GITHUB_ENV
      - name: Workflow_dispatch RELEASE_TYPE 
        if: github.event_name == 'workflow_dispatch'
        run: | 
          echo "RELEASE_TYPE=${{ github.event.inputs.release-type }}" >> $GITHUB_ENV
      - name: Echoing the release type
        run: |
          echo $RELEASE_TYPE
      - name: Setting the Reference
        run: |
          if [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
            echo "RELEASE_REF=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "RELEASE_REF=${{ github.base_ref }}" >> $GITHUB_ENV
          fi
      - name: Release with release action
        uses: greenbone/actions/release@v2
        with:
          python-version: "3.10"
          github-user: ${{ secrets.GREENBONE_BOT }}
          github-user-mail: ${{ secrets.GREENBONE_BOT_MAIL }}
          github-user-token: ${{ secrets.GREENBONE_BOT_TOKEN }}
          gpg-key: ${{ secrets.GPG_KEY }}
          gpg-fingerprint: ${{ secrets.GPG_FINGERPRINT }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          release-type: ${{ env.RELEASE_TYPE }}
          ref: ${{ env.RELEASE_REF }}
