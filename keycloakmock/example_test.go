package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"os"
	"testing"
	"time"

	"github.com/Nerzal/gocloak/v12"
	"github.com/samber/lo"

	"github.com/greenbone/user-management-api/auth"
)

func TestMain(m *testing.M) {
	// run mock server in background
	go func() {
		main()
	}()

	// wait for server to be up
	for {
		conn, err := net.Dial("tcp", fmt.Sprintf(":%d", ServerPort))
		if err == nil {
			conn.Close()
			log.Println("Mock server is up")
			break
		}
		time.Sleep(10 * time.Millisecond)
	}

	os.Exit(m.Run())
}

func Example() {
	var (
		userName        = "initial"                    // test user name
		clientID        = "local-web"                  // keycloak client id
		realmID         = "user-management"            // keycloak realm name
		keycloakMockUrl = "http://localhost:8080/auth" // keycloak server mock url
	)

	realmInfo := auth.KeycloakRealmInfo{
		RealmId:               realmID,
		AuthServerInternalUrl: keycloakMockUrl,
		AuthServerPublicUrl:   keycloakMockUrl,
	}

	authorizer, err := auth.NewKeycloakAuthorizer(realmInfo)
	if err != nil {
		log.Fatal(fmt.Errorf("error creating keycloak token authorizer: %w", err))
		return
	}

	client := gocloak.NewClient(keycloakMockUrl)
	jwt, err := client.GetToken(context.Background(), realmID, gocloak.TokenOptions{
		ClientID:  lo.ToPtr(clientID),
		GrantType: lo.ToPtr("password"),
		Username:  lo.ToPtr(userName),
		Password:  lo.ToPtr("some_password"),
	})
	if err != nil {
		log.Fatal(fmt.Errorf("error obtaining JWT: %w", err))
		return
	}

	userContext, err := authorizer.ParseJWT(context.Background(), jwt.AccessToken)
	if err != nil {
		log.Fatal(fmt.Errorf("error parsing JWT: %w", err))
		return
	}

	userContext.UserID = "" // it is autogenerated, removing for assert resons below
	fmt.Printf("%#v\n", userContext)
	// Output:
	// auth.UserContext{Realm:"user-management", UserID:"", UserName:"initial", EmailAddress:"initial@host.local", Roles:[]string{"default-roles-user-management", "offline_access", "uma_authorization", "user"}, Groups:[]string{"default-group-user-management"}, AllowedOrigins:[]string{"http://localhost:3000"}}
}
